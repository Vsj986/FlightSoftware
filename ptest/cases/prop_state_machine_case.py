from .base import SingleSatOnlyCase
import time

class PropCheckoutCase(SingleSatOnlyCase):
    def setup_case_singlesat(self):
        self.sim.flight_controller.write_state(
            "pan.state", self.mission_states.get_by_name("manual"))
        self.sim.flight_controller.write_state(
            "prop.state", self.prop_states.get_by_name("manual"))

    # This section is autogenerated by ./pan_generate /Users/athena/FlightSoftware/src/fsw/FCCode/PropController.cpp

    @property
    def tank1_valve_choice(self):
        return self.read_state(prop.tank1_valve_choice)

    @tank1_valve_choice.setter
    def tank1_valve_choice(self, val):
        self.write_state("prop.tank1.valve_choice", str(val))

    @property
    def state(self):
        return self.read_state(prop.state)

    @state.setter
    def state(self, val):
        self.write_state("prop.state", str(val))

    @property
    def cycles_until_firing(self):
        return self.read_state(prop.cycles_until_firing)

    @cycles_until_firing.setter
    def cycles_until_firing(self, val):
        self.write_state("prop.cycles_until_firing", str(val))

    @property
    def sched_valve3(self):
        return self.read_state(prop.sched_valve3)

    @sched_valve3.setter
    def sched_valve3(self, val):
        self.write_state("prop.sched_valve3", str(val))

    @property
    def sched_valve4(self):
        return self.read_state(prop.sched_valve4)

    @sched_valve4.setter
    def sched_valve4(self, val):
        self.write_state("prop.sched_valve4", str(val))

    @property
    def sched_intertank1(self):
        return self.read_state(prop.sched_intertank1)

    @sched_intertank1.setter
    def sched_intertank1(self, val):
        self.write_state("prop.sched_intertank1", str(val))

    @property
    def sched_intertank2(self):
        return self.read_state(prop.sched_intertank2)

    @sched_intertank2.setter
    def sched_intertank2(self, val):
        self.write_state("prop.sched_intertank2", str(val))

    @property
    def max_pressurizing_cycles(self):
        return self.read_state(prop.max_pressurizing_cycles)

    @max_pressurizing_cycles.setter
    def max_pressurizing_cycles(self, val):
        self.write_state("prop.max_pressurizing_cycles", str(val))

    @property
    def ctrl_cycles_per_filling(self):
        return self.read_state(prop.ctrl_cycles_per_filling)

    @ctrl_cycles_per_filling.setter
    def ctrl_cycles_per_filling(self, val):
        self.write_state("prop.ctrl_cycles_per_filling", str(val))

    @property
    def tank2_pressure(self):
        return self.read_state(prop.tank2_pressure)

    @tank2_pressure.setter
    def tank2_pressure(self, val):
        self.write_state("prop.tank2.pressure", str(val))

    @property
    def tank1_temp(self):
        return self.read_state(prop.tank1_temp)

    @tank1_temp.setter
    def tank1_temp(self, val):
        self.write_state("prop.tank1.temp", str(val))

    @property
    def pressurize_fail(self):
        return self.read_state(prop.pressurize_fail)

    @pressurize_fail.setter
    def pressurize_fail(self, val):
        self.write_state("prop.pressurize_fail", str(val))

    @property
    def sched_valve1(self):
        return self.read_state(prop.sched_valve1)

    @sched_valve1.setter
    def sched_valve1(self, val):
        self.write_state("prop.sched_valve1", str(val))

    @property
    def threshold_firing_pressure(self):
        return self.read_state(prop.threshold_firing_pressure)

    @threshold_firing_pressure.setter
    def threshold_firing_pressure(self, val):
        self.write_state("prop.threshold_firing_pressure", str(val))

    @property
    def ctrl_cycles_per_cooling(self):
        return self.read_state(prop.ctrl_cycles_per_cooling)

    @ctrl_cycles_per_cooling.setter
    def ctrl_cycles_per_cooling(self, val):
        self.write_state("prop.ctrl_cycles_per_cooling", str(val))

    @property
    def tank2_temp(self):
        return self.read_state(prop.tank2_temp)

    @tank2_temp.setter
    def tank2_temp(self, val):
        self.write_state("prop.tank2.temp", str(val))

    @property
    def sched_valve2(self):
        return self.read_state(prop.sched_valve2)

    @sched_valve2.setter
    def sched_valve2(self, val):
        self.write_state("prop.sched_valve2", str(val))

    def print_object(self):
        print(f"[TESTCASE] tank1_valve_choice: {self.tank1_valve_choice}")
        print(f"[TESTCASE] state: {self.state}")
        print(f"[TESTCASE] cycles_until_firing: {self.cycles_until_firing}")
        print(f"[TESTCASE] sched_valve3: {self.sched_valve3}")
        print(f"[TESTCASE] sched_valve4: {self.sched_valve4}")
        print(f"[TESTCASE] sched_intertank1: {self.sched_intertank1}")
        print(f"[TESTCASE] sched_intertank2: {self.sched_intertank2}")
        print(f"[TESTCASE] max_pressurizing_cycles: {self.max_pressurizing_cycles}")
        print(f"[TESTCASE] ctrl_cycles_per_filling: {self.ctrl_cycles_per_filling}")
        print(f"[TESTCASE] tank2_pressure: {self.tank2_pressure}")
        print(f"[TESTCASE] tank1_temp: {self.tank1_temp}")
        print(f"[TESTCASE] pressurize_fail: {self.pressurize_fail}")
        print(f"[TESTCASE] sched_valve1: {self.sched_valve1}")
        print(f"[TESTCASE] threshold_firing_pressure: {self.threshold_firing_pressure}")
        print(f"[TESTCASE] ctrl_cycles_per_cooling: {self.ctrl_cycles_per_cooling}")
        print(f"[TESTCASE] tank2_temp: {self.tank2_temp}")
        print(f"[TESTCASE] sched_valve2: {self.sched_valve2}")

    # End autogenerated section